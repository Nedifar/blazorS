@page "/tablocabinet"
@inject HttpClient Http
@using TabloBlazorMain.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Web;
@inject NavigationManager NavigationManager
<head>
    <meta charset="UTF-8" http-equiv="refresh" content="1800">
    <title>TabloCabinet</title>
    <link rel="stylesheet" href="/css/TabloFloorStyle.css" type="text/css" />
    <style>
        * {
            color: white
        }
    </style>
</head>
<body class="mainBody">
    <video hidden autoplay muted loop>
        <source src="audio/TishinaAudio.mp3" />
    </video>
    <div class="current_date_time">
        <p class="monthP">
            @month
        </p>
        <p class="dateP">
            @date
        </p>
        <p class="monthP">
            @cabinet
        </p>
    </div>
    <div style="top:40%" class="current_paras_week">
        <table>
            <tr>
                <td width="5%">Номер пары</td>
                <td width="45%">Дисциплина</td>
                <td width="5%">Группа</td>
                <td width="12%">Преподаватель</td>
            </tr>
            @foreach (var model in DayWeeks)
            {
                <tr>
                    <td width="5%" style="font-size:1.5em">@model.Number</td>
                    <td width="45%" style="font-size:1.5em">@model.GetDeciplineWithVerify(teachers)</td>
                    <td width="5%" style="font-size:1.5em">@model.group</td>
                    <td width="12%" style="font-size:1.5em">@model.teacher(teachers)</td>
                </tr>
            }
        </table>
    </div>
    <div class="StatusParaDiv" style="position: absolute; top: 70%; text-align:center; width:100%">
        <p style="display:block" class="monthP">
            @statusPara
        </p>
    </div>
    <div class="current_week_name">
        <p>
            @weekName
        </p>
    </div>
    <div class="current_weather">
        @weather
    </div>
    <div class="current_admin">
        <p class="currentAdminTextP">
            Дежурный администратор:
        </p>
        <p class="currentAdminSelAdminP">
            @selectedAdmin
        </p>
    </div>
    <div class="current_para">
        <p class="current_paraLabelPara">
            @update.labelPara
        </p>
        <p class="current_paraNumberPara">
            @update.tbNumberPara
        </p>
    </div>
</body>


@code {
    [Parameter]
    public string cabinet { get; set; }
    private HubConnection hubConnection;
    public string date { get; set; }
    public string month { get; set; }
    public string d1 { get; set; }
    public string min { get; set; } = "мин";
    public string d2 { get; set; }
    public string d3 { get; set; }
    public string d4 { get; set; }
    public int count { get; set; }
    public string weekName { get; set; }
    public string weather { get; set; }
    public List<string> teachers { get; set; }
    public string selectedAdmin { get; set; }
    public string statusPara { get; set; }
    RequestForDynamicUpdate update { get; set; } = new RequestForDynamicUpdate();
    public List<TabloBlazorMain.Shared.LastDanceModels.DayWeekClass> DayWeeks = new List<TabloBlazorMain.Shared.LastDanceModels.DayWeekClass>();
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/GoodHubGbl")).WithAutomaticReconnect().Build();
        hubConnection.On<string>("SendWeather", async (message) =>
        {
            weather = message;
            var response = await Http.GetAsync($"api/LastDance/getteacherslist");
            response.EnsureSuccessStatusCode();
            teachers = response.Content.ReadAsAsync<List<string>>().Result;
            StateHasChanged();
        });
        hubConnection.On<string>("SendWeekName", (message) =>
        {
            weekName = message;
            StateHasChanged();
        });
        hubConnection.On<string>("SendAdmin", (message) =>
        {
            selectedAdmin = message;
            d1 = message[0].ToString();
            d2 = message[1].ToString();
            d3 = message[3].ToString();
            d4 = message[4].ToString();
            month = DateTime.Now.ToString("dd MMMM");
            StateHasChanged();
        });
        hubConnection.On<RequestForDynamicUpdate>("SendRequest", (message) =>
        {
            try
            {
                if (count == 100)
                {
                    getParasTableDate();
                    statusPara = DayWeeks.Where(p => p.Number.ToString() == update.paraNow).FirstOrDefault()
            .pp.Contains("Последняя пара") ? "Последняя пара, пожалуйста, поднимите за собой стулья." : "";
                    count = 0;
                }
                update = message;
                date = update.timeNow;
                count += 1;
                StateHasChanged();
            }
            catch
            {

            }

        });
        await getMainUpdate();
        await getParasTableDate();
        month = DateTime.Now.ToString("dd MMMM");
        getWeekName();
        getAdmins();
        getWeather();
        //StartTimer();
        await hubConnection.StartAsync();
    }

    string getColor(Para pr)
    {
        if (pr.runningNow)
            return "rgb(167,51,247)";
        else
            return "transparent";
    }

    string getFullHeight(List<Para> paras)
    {
        double height = 0;
        foreach (var lv in paras)
        {
            height += 100 / @update.grLineHeight * lv.height * 1.1;
        }
        return (height + "%").Replace(',', '.');
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        await getParasTableDate();
        statusPara = DayWeeks.Where(p => p.Number.ToString() == update.paraNow).FirstOrDefault()
    .pp.Contains("Последняя пара") ? "Последняя пара, пожалуйста, поднимите за собой стулья." : "";
        StateHasChanged();
    }

    private async void getWeather()
    {
        try
        {
            var response = await Http.GetAsync("TabloApi/weather");
            response.EnsureSuccessStatusCode();
            var str = response.Content.ReadAsStringAsync().Result;
            weather = str.Replace("'", "");
            var response1 = await Http.GetAsync($"api/LastDance/getteachersList");
            response1.EnsureSuccessStatusCode();
            teachers = response1.Content.ReadAsAsync<List<string>>().Result;
        }
        catch (Exception ex)
        { Console.WriteLine(ex.Message); }
    }
    private async void getWeekName()
    {
        try
        {
            var response = await Http.GetAsync("TabloApi/weekName");
            response.EnsureSuccessStatusCode();
            var str = response.Content.ReadAsStringAsync().Result;
            weekName = str.Replace("'", "");
        }
        catch (Exception ex)
        { Console.WriteLine(ex.Message); }
    }
    private async void getAdmins()
    {
        try
        {
            var response = await Http.GetAsync("TabloApi/admins");
            response.EnsureSuccessStatusCode();
            var str = response.Content.ReadAsStringAsync().Result;
            selectedAdmin = str.Replace("\n", "<wbr/>");
        }
        catch (Exception ex)
        { Console.WriteLine(ex.Message); }
    }
    private async Task getMainUpdate()
    {
        try
        {
            var response = await Http.GetAsync("TabloApi/update");
            response.EnsureSuccessStatusCode();
            update = response.Content.ReadAsAsync<RequestForDynamicUpdate>().Result;
            date = update.timeNow;
            d1 = date[0].ToString();
            d2 = date[1].ToString();
            d3 = date[3].ToString();
            d4 = date[4].ToString();
        }
        catch { }
    }
    private async Task getParasTableDate()
    {
        try
        {
            cabinet = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query).Get("cabinet");
            var response = await Http.GetAsync($"api/LastDance/GetCabinentsWithDetail?cabinet={cabinet}"); //Здесь почему то появляется ЧКР
            response.EnsureSuccessStatusCode();
            DayWeeks = new List<TabloBlazorMain.Shared.LastDanceModels.DayWeekClass>();
            foreach(var item in response.Content.ReadAsAsync<List<TabloBlazorMain.Shared.LastDanceModels.DayWeekClass>>().Result)
                {
                DayWeeks.Add(item);
                }
            if (update.lv.Where(p => p.TypeInterval.name == "ЧКР").FirstOrDefault() != null)
            {
                var item = new TabloBlazorMain.Shared.LastDanceModels.DayWeekClass { Day = "ЧКР" };
                var usl = update.lv.Where(p => p.TypeInterval.name == "ЧКР" || p.TypeInterval.name == "Пара").ToList();
                for (int i = 0; i < usl.Count(); i++)
                {
                    if (usl[i].TypeInterval.name == "ЧКР")
                    {
                        if (i == 0)
                        {
                            item.pp = "Сейчас идёт ЧКР";
                        }
                        else
                        {
                            item.pp = DayWeeks[i - 1].pp;
                            DayWeeks[i - 1].pp = "Сейчас будет ЧКР\n" + DayWeeks[i - 1].pp;
                        }
                        DayWeeks.Insert(i, item);
                        break;
                    }
                }
            }
        }
        catch { }
    }
}

